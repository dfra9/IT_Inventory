@model global::IT_Inventory.ViewModel.AssetManagementViewModel

@{
    ViewData["Title"] = "Dashboard";
}

<div class="form-group row">
    <div class="col-sm-2">
        <select id="cityAsset" name="Asset City" class="form-control select2">
            <option value="">Select City</option>
            @if (ViewBag.City != null)
            {
                foreach (var city in ViewBag.City)
                {
                    <option value="@city.City_Name" @(Model.City_Name == city.City_Name ? "selected" : "")>@city.City_Name</option>
                }
            }
        </select>
    </div>
</div>
<!-- Main content -->
<section class="content">
    <div class="container-fluid">

        <div class="row">
            <div class="col-lg-3 col-6">
                <!-- small box -->
                <div class="small-box bg-info">
                    <div class="inner">
                        <h3 id="total-assets">@(Model.DashboardCounts?.TotalAssets ?? 0)</h3>
                        <p>Total Assets</p>
                    </div>
                    <div class="icon">
                        <i class="ion ion-bag"></i>
                    </div>

                </div>
            </div>
            <!-- ./col -->
            <div class="col-lg-3 col-6">
                <!-- small box -->
                <div class="small-box bg-success">
                    <div class="inner">
                        <h3 id="available-assets">@(Model.DashboardCounts?.AvailableAssets ?? 0)</h3>
                        <p>Available Assets</p>
                    </div>
                    <div class="icon">
                        <i class="ion ion-stats-bars"></i>
                    </div>

                </div>
            </div>
            <!-- ./col -->
            <div class="col-lg-3 col-6">
                <!-- small box -->
                <div class="small-box bg-warning">
                    <div class="inner">
                        <h3 id="assets-in-use-assets">@(Model.DashboardCounts?.AssetsInUse ?? 0)</h3>

                        <p>Assets In Use</p>
                    </div>
                    <div class="icon">
                        <i class="ion ion-person-add"></i>
                    </div>

                </div>
            </div>
            <!-- ./col -->
            <div class="col-lg-3 col-6">
                <!-- small box -->
                <div class="small-box bg-danger">
                    <div class="inner">
                        <h3 id="assets-in-maintenance">@(Model.DashboardCounts?.AssetsInMaintenance ?? 0)</h3>

                        <p>Assets in Maintenance</p>
                    </div>
                    <div class="icon">
                        <i class="ion ion-pie-graph"></i>
                    </div>

                </div>
            </div>
            <!-- ./col -->
        </div>
    </div>
</section>

<h4 class="mt-4 mb-2">History</h4>
<div class="row">
    <div class="col-12">
        <div class="card">
            <div class="card-header">
                <div class="row align-items-center">
                    <div class="col-md-6">
                        <div class="input-group input-group-sm" style="width: 200px;">
                            <input type="text" id="tableSearch" class="form-control" placeholder="Search">
                            <div class="input-group-append">
                                <button type="submit" id="btnDashboardSearch" class="btn btn-default">
                                    <i class="fas fa-search"></i>
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <!-- /.card-header -->

            <div class="card-body table-responsive p-0">
                <table id="dashboardTable" class="table table-head-fixed text-nowrap">
                    <thead>
                        <tr>
                            <th>Label Asset</th>
                            <th>Product Type</th>
                            <th>Description Product</th>
                            <th>Purchase Date</th>
                            <th>Status</th>
                            <th>Location</th>
                            <th>Departement </th>
                        </tr>
                    </thead>

                    <tbody>
                        @if (Model.DashHistory != null && Model.DashHistory.Any())
                        {
                            foreach (var item in Model.DashHistory)
                            {
                                <tr class="@(item.Is_Deleted.HasValue && item.Is_Deleted.Value ? "bgOff" : "")">
                                    <td>@item.No_asset</td>
                                    <td>@item.Material_Group</td>
                                    <td>@item.Material_Description</td>
                                    <td>@(item.Transaction_Date.HasValue ? item.Transaction_Date.Value.ToString("yyyy-MM-dd"): "")</td>
                                    <td>@item.Status</td>
                                    <td>@item.Location</td>
                                    <td>@item.Departement</td>
                                </tr>
                            }
                        }
                        else
                        {
                            <tr>
                                <td colspan="7">No Asset Found</td>
                            </tr>
                        }
                    </tbody>

                </table>
            </div>
            <!-- /.card-body -->

        </div>
        <!-- /.card -->
    </div>
</div>


<style>
    .table-responsive {
        width: 100%;
        margin-right: 0;
        overflow-x: auto;
        min-height: 200px;
    }

    #dashboardTable {
        width: 100% !important;
        margin-bottom: 0 !important;
        table-layout: auto;
    }

        #dashboardTable tfoot input {
            width: 100%;
            padding: 3px;
            box-sizing: border-box;
        }

    .dataTables_info {
        padding: 10px 15px !important;
        margin: 0 !important;
        float: left;
    }

    .dataTables_paginate {
        padding: 10px 15px !important;
        margin: 0 !important;
        float: right;
    }

    .card {
        margin-bottom: 20px !important;
    }

    .card-body {
        padding: 0;
    }

    .table-footer-container {
        display: flex;
        justify-content: space-between;
        align-items: center;
        width: 100%;
        padding: 10px 15px;
        margin: 0;
        border-top: 1px solid #dee2e6;
    }

    #dashboardTable > tbody > tr > td {
        vertical-align: middle;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
        padding: 8px;
    }

    .bgOff {
        background-color: rgba(130, 205, 55, 0.39) !important;
    }

    .card-footer {
        padding: 0.75rem 1.25rem;
        background-color: rgba(0, 0, 0, 0.03);
        border-top: 1px solid rgba(0, 0, 0, 0.125);
    }

    .search-results-info {
        margin: 0;
        padding: 10px 15px;
        border-top: 1px solid #dee2e6;
    }

    .row {
        display: flex;
        flex-wrap: wrap;
        margin-right: -7.5px;
        margin-left: -7.5px;
    }

    .dataTables_wrapper .dataTables_paginate {
        text-align: right;
    }

    .dataTables_wrapper .dataTables_info,
    .dataTables_wrapper .dataTables_paginate {
        padding-top: 0.755em !important;
    }

    .dataTables_empty {
        text-align: center;
        padding: 20px !important;
    }

    .dataTables_wrapper .row:last-child {
        border-top: 1px solid #dee2e6;
        margin-top: 0;
        margin-bottom: 0;
    }
</style>
<script>
$(document).ready(function () {
    function updateDashboardCounts(dashboardCounts) {
        if (!dashboardCounts) return;

        if (dashboardCounts.TotalAssets !== undefined) {
            $('#total-assets').text(dashboardCounts.TotalAssets);
        }

        if (dashboardCounts.AvailableAssets !== undefined) {
            $('#available-assets').text(dashboardCounts.AvailableAssets);
        }

        if (dashboardCounts.AssetsInUse !== undefined) {
            $('#assets-in-use-assets').text(dashboardCounts.AssetsInUse);
        }

        if (dashboardCounts.AssetsInMaintenance !== undefined) {
            $('#assets-in-maintenance').text(dashboardCounts.AssetsInMaintenance);
        }
    }


    function refreshDashboardData() {
        var cityName = $('#cityAsset').val();
        $.ajax({
            url: '/Home/GetDashboardCountsJson',
            type: 'GET',
            dataType: 'json',
            data: { cityName: cityName},
            cache: false,
            success: function (dashboardCounts) {
                console.log("Dashboard data refreshed successfully:", dashboardCounts);
                updateDashboardCounts(dashboardCounts);
            },
            error: function (xhr, status, error) {
                console.error('Error refreshing dashboard data:', error);
                console.error('Status:', status);
                console.error('Response:', xhr.responseText);
            }
        });
    }

    refreshDashboardData();

    const columnMapping = {
        'Label Asset': 'No_asset',
        'Product Type': 'Material_Group',
        'Description Product': 'Material_Description',
        'Purchase Date': 'Transaction_Date',
        'Status': 'Status',
        'Location': 'Location',
        'Departement': 'Departement'
    };

    $('#cityAsset').on('change', function () {
        refreshDashboardData();
        if (table) {
            table.ajax.reload();
        }
    });

    var table = $("#dashboardTable").DataTable({
        "processing": true,
        "serverSide": true,
        "scrollX": true,
        "stateSave": false,
        "paging": true,
        "pagingType": "full_numbers",
        "searching": true,
        "lengthChange": true,
        "pageLength": 10,
        "responsive": true,
        "autoWidth": false,
        "ajax": {
            "url": '@Url.Action("GetDashboardData", "Home")',
            "type": "POST",
            "dataType": "json",
            "data": function (d) {
                d.cityName = $('#cityAsset').val();
                if (d.order && d.order.length > 0) {
                    var columnIndex = d.order[0].column;
                    var columnHeader = $("#dashboardTable thead th").eq(columnIndex).text().trim();

                    d.orderColumn = columnMapping[columnHeader] || columnHeader;
                    d.orderDir = d.order[0].dir;
                }
                d.globalSearch = $('#tableSearch').val();


                return d;
            }
        },
        "columns": [
            { "data": "No_asset", "name": "No_asset",  "orderable": true },
            { "data": "Material_Group", "name": "Material_Group", "autoWidth": true },
            { "data": "Material_Description", "name": "Material_Description",  "orderable": true },
            { "data": "Transaction_Date", "name": "Transaction_Date", "orderable": true, render: function (data) { return formatDate(data); } },
            { "data": "Status", "name": "Status","orderable": true },
            { "data": "Location", "name": "Location", "orderable": true },
            { "data": "Departement", "name": "Departement", "orderable": true }
        ],
        "order": [[3, "desc"]],
        "createdRow": function (row, data, index) {
            if (data.Is_Deleted) {
                $(row).addClass('bgOff');
            }
        },
        "dom": 'lBrtip',
        "language": {
            "emptyTable": "No Assets Found",
            "zeroRecords": "No matching records found",
            "info": "Showing _START_ to _END_ of _TOTAL_ entries",
            "infoEmpty": "Showing 0 to 0 of 0 entries",
            "infoFiltered": "(filtered from _MAX_ total entries)"
        }
    });

    $('#dashboardTable thead th').off('click').on('click', function () {
        var columnIndex = $(this).index();
        var currentDirection = table.order()[0][1];
        var newDirection = currentDirection === 'asc' ? 'desc' : 'asc';

        table.order([columnIndex, newDirection]).draw();
    });

    $("#tableSearch").on("keyup", function () {
        table.search(this.value).draw();
    });

    $('#btnDashboardSearch').on('click', function () {
        table.search($('#tableSearch').val()).draw();
    });

    function formatDate(dateString) {
        if (!dateString) return "";

        try {
            if (typeof dateString === 'string' && dateString.indexOf('/Date(') === 0) {
                var timeStamp = parseInt(dateString.substr(6));
                var date = new Date(timeStamp);
                if (isNaN(date.getTime())) return "";

                var year = date.getFullYear();
                var month = (date.getMonth() + 1).toString().padStart(2, '0');
                var day = date.getDate().toString().padStart(2, '0');
                return year + '-' + month + '-' + day;
            } else {
                var date = new Date(dateString);
                if (isNaN(date.getTime())) return "";
                var year = date.getFullYear();
                var month = (date.getMonth() + 1).toString().padStart(2, '0');
                var day = date.getDate().toString().padStart(2, '0');
                return year + '-' + month + '-' + day;
            }
        } catch (e) {
            console.error("Error parsing date:", e);
            return "";
        }
    }
});
</script>