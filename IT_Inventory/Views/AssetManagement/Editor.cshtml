@model global::IT_Inventory.ViewModel.AssetManagementViewModel
@{
    var mode = ViewBag.Mode ?? "Create";
    ViewBag.Title = @mode + " - Asset Management";
    var readOnly = mode == "View" || mode == "Delete";
    var showHistory = mode != "Create";
}


<link href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css" rel="stylesheet" />
<style>

    .select2-dropdown {
        z-index: 9999;
    }


    .select2-search__field {
        width: 100% !important;
        padding: 6px !important;
    }


    .select2-container--default .select2-selection--single {
        height: calc(2.25rem + 2px);
        padding: .375rem .75rem;
    }

    .btn-view, .btn-edit {
        margin-right: 5px;
    }

    #assetDetailsTable th {
        width: 20%;
        background-color: #f8f9fa;
    }

    .modal-header {
        background-color: #007bff;
        color: white;
    }

        .modal-header .close {
            color: white;
        }

    #assetHistoryTable tr:hover {
        background-color: #f1f7ff;
        cursor: pointer;
    }

    #assetHistoryTable th:last-child,
    #assetHistoryTable td:last-child {
        width: 120px;
        text-align: center;
    }


    .status-borrowing {
        color: #28a745;
        font-weight: bold;
    }


    .status-return {
        color: #007bff;
    }

    .status-service {
        color: #ffc107;
        font-weight: bold;
    }

    .status-ready {
        color: #17a2b8;
    }

    .status-assign {
        color: #6610f2;
    }

    .status-write-off {
        color: #dc3545;
    }

    #editAssetModal .modal-dialog {
        max-width: 500px;
    }

    #viewAssetModal .modal-dialog {
        max-width: 800px;
    }

    #editAssetForm .form-group {
        margin-bottom: 1rem;
    }

    #editAssetForm label {
        font-weight: 600;
    }

    .validation-error {
        animation: fadeIn 0.3s ease-in-out;
    }

    select2-container--default.is-invalid .select2-selection--single {
        background-color: #fff8f8;
    }

    .form-control.is-invalid {
        background-color: #fff8f8;
    }


    .select2-container--default.is-invalid .select2-selection--single {
        border-color: #dc3545 !important;
    }

    .is-invalid {
        border-color: #dc3545 !important;
    }


    .text-danger.validation-error {
        display: block;
        width: 100%;
        margin-top: 0.25rem;
        font-size: 80%;
        color: #dc3545;
        font-weight: normal;
    }

    .position-relative {
        position: relative;
    }

    .currency-suffix {
        position: absolute;
        right: 10px;
        top: 50%;
        transform: translateY(-50%);
        color: #495057;
        pointer-events: none;
        font-size: 14px;
    }

    .acquisition-value {
        padding-right: 45px;
    }

    .card-primary {
        background-color: #007bff;
        border-radius: 4px;
        width: 30%;
        float: left;
        margin-right: 2%;
        margin-bottom: 20px;
    }

        .card-primary .card-header {
            background-color: #007bff;
            color: white;
            border-bottom: 1px solid rgba(255, 255, 255, 0.2);
        }

        .card-primary .card-body {
            padding: 15px;
            background-color: #fff;
            color: #212529;
        }

        .card-primary .form-group {
            margin-bottom: 15px;
            width: 100%;
        }

        .card-primary .form-control,
        .card-primary .select2-container--default .select2-selection--single {
            width: 100%;
            background-color: #fff;
            color: #495057;
        }

        .card-primary label {
            color: #212529;
            font-weight: 500;
            display: block;
            margin-bottom: 5px;
        }

    .status-form {
        padding-top: 10px;
    }

    .action-buttons {
        margin-top: 20px;
    }

    .card-primary .btn-secondary {
        background-color: #6C757D;
        color: #FFFFFF;
        border-color: #f8f9fa;
    }

    .card-primary .btn-primary {
        background-color: #28a745;
        border-color: #28a745;
    }

    .clearfix::after {
        content: "";
        clear: both;
        display: table;
    }

    #assetHistoryTable {
        clear: both;
    }

    .card-primary .select2-container--default .select2-selection--single {
        height: calc(2.25rem + 2px);
        padding: .375rem .75rem;
        border: 1px solid #ced4da;
    }

    .card-primary .select2-container--default .select2-selection__rendered {
        color: #495057;
    }

    .card-primary input[type="date"],
    .card-primary input[type="text"] {
        width: 100%;
    }

    .image-link-wrapper {
        display: flex;
        align-items: center;
        margin-bottom: 8px;
        position: relative;
    }

    .image-link {
        flex: 1;
        color: #007bff;
        text-decoration: underline;
        padding-right: 30px;
        margin-bottom: 0 !important;
    }

    .delete-image-btn {
        position: absolute;
        right: 0;
        background-color: #dc3545;
        color: white;
        border-radius: 50%;
        width: 22px;
        height: 22px;
        padding: 0;
        line-height: 1;
        font-weight: bold;
        text-align: center;
        border: none;
        cursor: pointer;
        font-size: 14px;
        display: flex;
        justify-content: center;
        align-items: center;
    }

        .delete-image-btn:hover {
            background-color: #bd2130;
        }

    #imageLinks {
        max-height: 150px;
        overflow-y: auto;
        margin-bottom: 10px;
    }
</style>

<section class="content">
    @using (Html.BeginForm("Editor", "AssetManagement", FormMethod.Post, new { id = "assetForm", enctype = "multipart/form-data" }))
    {
        @Html.AntiForgeryToken()
        <input type="hidden" name="mode" value="@mode" />

        <div class="card card-default">
            <div class="card-header">
                <div class="card-tools">
                    <button type="button" class="btn btn-tool" data-card-widget="collapse">
                        <i class="fas fa-minus"></i>
                    </button>
                </div>
            </div>

            <!-- /.card-header -->
            <div class="card-body">
                <div class="row">
                    <div class="col-md-6">
                        <div class="form-group col-4">
                            <label class="">No Asset</label>
                            @if (mode == "Create")
                            {
                                @Html.TextBoxFor(m => m.No_asset, new { @class = "form-control", placeholder = "Input No Asset", id = "No_asset" })
                            }
                            else
                            {
                                @Html.TextBoxFor(m => m.No_asset, new { @class = "form-control", placeholder = "Input No Asset", id = "No_asset", @readonly = "readonly" })
                            }
                            @Html.ValidationMessageFor(m => m.No_asset, "", new { @class = "text-danger" })
                        </div>
                        <!-- /.form-group -->
                        <div class="form-group col-4">
                            <label>Company Code</label>
                            @if (mode == "View" || mode == "Delete")
                            {
                                @Html.TextBoxFor(m => m.Company_Code, new { @class = "form-control", @readonly = "readonly" })
                            }
                            else
                            {
                                @Html.DropDownListFor(m => m.Company_Code, Model.GetCompanyListItem(), "Select Company Code", new { @class = "form-control select2", id = "companyCodeDropdown" })
                            }
                            @Html.ValidationMessageFor(m => m.Company_Code, "", new { @class = "text-danger" })
                        </div>
                        <div class="form-group col-4">
                            <label>Company Name</label>
                            @Html.TextBoxFor(m => m.Company_Name, new { @class = "form-control", @readonly = "readonly", id = "Company_Name" })
                        </div>
                        <div class="form-group col-5">
                            <label>Material Group </label>
                            @if (mode == "View" || mode == "Delete")
                            {
                                @Html.TextBoxFor(m => m.Material_Group, new { @class = "form-control", @readonly = "readonly" })
                            }
                            else
                            {
                                @Html.DropDownListFor(m => m.Material_Group, Model.GetMaterialGroupListItem(), "Select Material Group", new { @class = "form-control select2", id = "materialGroupDropdown" })
                            }
                            @Html.ValidationMessageFor(m => m.Material_Group, "", new { @class = "text-danger" })
                        </div>
                        <div class="form-group col-5">
                            <label>Material Code</label>
                            @if (mode == "View" || mode == "Delete")
                            {
                                @Html.TextBoxFor(m => m.Material_Code, new { @class = "form-control", @readonly = "readonly" })
                            }
                            else
                            {
                                @Html.DropDownListFor(m => m.Material_Code, Model.GetMaterialCodeListItem(), "Select Material Code", new { @class = "form-control select2", id = "materialCodeDropdown" })
                            }
                            @Html.ValidationMessageFor(m => m.Material_Code, "", new { @class = "text-danger" })
                        </div>
                        <div class="form-group col-11">
                            <label>Asset Description</label>
                            @if (mode == "View" || mode == "Delete")
                            {
                                @Html.TextBoxFor(m => m.Material_Description, new { @class = "form-control", placeholder = "Input Asset Description", id = "materialDescriptionDropdown", @readonly = "readOnly" })
                            }
                            else
                            {
                                @Html.TextBoxFor(m => m.Material_Description, new { @class = "form-control", placeholder = "Input Asset Description", id = "materialDescriptionDropdown" })
                            }
                            @Html.ValidationMessageFor(m => m.Material_Description, "", new { @class = "text-danger" })
                        </div>
                        <div class="form-group col-2">
                            <label>Quantity</label>
                            @if (mode == "View" || mode == "Delete")
                            {
                                @Html.TextBoxFor(m => m.Quantity, new { @class = "form-control", type = "number", placeholder = "Input Quantity", @readonly = "readOnly" })
                            }
                            else
                            {
                                @Html.TextBoxFor(m => m.Quantity, new { @class = "form-control", type = "number", placeholder = "Input Quantity" })
                            }
                            @Html.ValidationMessageFor(m => m.Quantity, "", new { @class = "text-danger" })
                        </div>
                        <div class="form-group col-3">
                            <label>UoM</label>
                            @if (mode == "View" || mode == "Delete")
                            {
                                @Html.TextBoxFor(m => m.UoM, new { @class = "form-control", @readonly = "readonly" })
                            }
                            else
                            {
                                @Html.DropDownListFor(m => m.UoM, Model.GetUoMListItem(), "Select UoM", new { @class = "form-control select2", id = "UoMDropdown" })
                            }
                            @Html.ValidationMessageFor(m => m.UoM, "", new { @class = "text-danger" })
                        </div>
                        <div class="form-group col-4">
                            <label>Acquisition Date</label>
                            @if (mode == "View" || mode == "Delete")
                            {
                                @Html.TextBoxFor(m => m.Acquisition_Date, "{0:yyyy-MM-dd}", new { @class = "form-control", type = "date", @readonly = "readOnly" })
                            }
                            else
                            {
                                @Html.TextBoxFor(m => m.Acquisition_Date, "{0:yyyy-MM-dd}", new { @class = "form-control", type = "date" })
                            }
                            @Html.ValidationMessageFor(m => m.Acquisition_Date, "", new { @class = "text-danger" })
                        </div>
                        <div class="form-group col-4">
                            <label>Acquisition Value</label>
                            <div class="position-relative">
                                @if (mode == "View" || mode == "Delete")
                                {
                                    @Html.TextBoxFor(m => m.Acquisition_value, new { @class = "form-control acquisition-value", type = "number", @readonly = "readOnly" })
                                }
                                else
                                {
                                    @Html.TextBoxFor(m => m.Acquisition_value, new { @class = "form-control acquisition-value", type = "number" })
                                }
                                <span class="currency-suffix">IDR</span>
                            </div>
                            @Html.ValidationMessageFor(m => m.Acquisition_value, "", new { @class = "text-danger" })
                        </div>

                        <div class="form-group">
                            <label class="control-label col-sm-2">Asset Image</label>
                            <div class="col-sm-5">
                                @if (mode == "View" || mode == "Delete")
                                {
                                    <input class="form-control" type="file" accept=".JPEG, .JPG, .PNG, .GIF, .JFIF" id="file" name="file" disabled style="background-color: #e9ecef;">
                                    @Html.HiddenFor(m => m.Asset_Image)
                                }
                                else
                                {
                                    <input class="form-control" type="file" accept=".JPEG, .JPG, .PNG, .GIF, .JFIF" id="file" name="file" multiple onchange="previewMultiple()">
                                    @Html.HiddenFor(m => m.Asset_Image)
                                }
                            </div>
                        </div>
                        <div class="form-group">
                            <label class="form-label col-sm-2">Preview</label>
                            <div class="col-sm-5">
                                <div id="imagePreviewContainer" class="image-preview-wrapper" style="border: 1px solid #ddd; border-radius: 6px; min-height: 200px; padding: 10px">
                                    <div id="imageLinks" style="margin-bottom: 10px;"></div>
                                    <div id="currentPreview" style="display: none; text-align: center; margin-top: 10px;">
                                        <img id="assetImagePreview" style="max-height: 200px; max-width: 100%;" class="img-fluid" />
                                    </div>
                                    <span id="noImageText" style="color: #6c757d; font-style: italic; display: block; text-align: center; padding: 20px 0;">No images selected</span>
                                </div>
                            </div>
                        </div>
                <!-- /.form-group -->
            </div>

            <!-- /.col -->
            <div class="col-md-6">
                <div class="form-group col-4">
                    <label>No Asset PGA</label>
                    @if (mode == "View" || mode == "Delete")
                    {
                        @Html.TextBoxFor(m => m.No_Asset_PGA, new { @class = "form-control", placeholder = "Input No Asset PGA", @readonly = "readOnly" })
                    }
                    else
                    {
                        @Html.TextBoxFor(m => m.No_Asset_PGA, new { @class = "form-control", placeholder = "Input No Asset PGA" })
                    }
                    @Html.ValidationMessageFor(m => m.No_Asset_PGA, "", new { @class = "text-danger" })
                </div>
                <!-- /.form-group -->
                <div class="form-group col-4">
                    <label>No Asset Accounting</label>
                    @if (mode == "View" || mode == "Delete")
                    {

                        @Html.TextBoxFor(m => m.No_Asset_Accounting, new { @class = "form-control", placeholder = "Input No Asset Accounting", @readonly = "readOnly" })
                    }
                    else
                    {
                        @Html.TextBoxFor(m => m.No_Asset_Accounting, new { @class = "form-control", placeholder = "Input No Asset Accounting" })
                    }

                    @Html.ValidationMessageFor(m => m.No_Asset_Accounting, "", new { @class = "text-danger" })
                </div>
                <!-- /.form-group -->
                <div class="form-group col-2">
                    <label>No PO</label>
                    @if (mode == "View" || mode == "Delete")
                    {
                        @Html.TextBoxFor(m => m.No_PO, new { @class = "form-control", placeholder = "Input No PO", @readonly = "readOnly" })
                    }
                    else
                    {
                        @Html.TextBoxFor(m => m.No_PO, new { @class = "form-control", placeholder = "Input No PO" })
                    }
                    @Html.ValidationMessageFor(m => m.No_PO, "", new { @class = "text-danger" })
                </div>
                <div class="form-group col-4">
                    <label>Serial Number</label>
                    @if (mode == "View" || mode == "Delete")
                    {
                        @Html.TextBoxFor(m => m.Serial_Number, new { @class = "form-control", placeholder = "Input Serial Number", @readonly = "readOnly" })
                    }
                    else
                    {
                        @Html.TextBoxFor(m => m.Serial_Number, new { @class = "form-control", placeholder = "Input Serial Number" })
                    }
                    @Html.ValidationMessageFor(m => m.Serial_Number, "", new { @class = "text-danger" })
                </div>
                <div class="form-group col-4">
                    <label>Device Id</label>
                    @if (mode == "View" || mode == "Delete")
                    {
                        @Html.TextBoxFor(m => m.Device_Id, new { @class = "form-control", placeholder = "Input Device Id", @readonly = "readOnly" })
                    }
                    else
                    {
                        @Html.TextBoxFor(m => m.Device_Id, new { @class = "form-control", placeholder = "Input Device Id" })
                    }
                    @Html.ValidationMessageFor(m => m.Device_Id, "", new { @class = "text-danger" })
                </div>
                <!-- /.form-group -->
                <div class="form-group col-8">
                    <label>Latest User</label>
                    @if (mode == "View" || mode == "Delete")
                    {
                        @Html.TextBoxFor(m => m.Latest_User, new { @class = "form-control", placeholder = "Input Latest User", @readonly = "readOnly" })
                    }
                    else
                    {
                        @Html.TextBoxFor(m => m.Latest_User, new { @class = "form-control", placeholder = "Input Latest User" })
                    }
                    @Html.ValidationMessageFor(m => m.Latest_User, "", new { @class = "text-danger" })
                </div>
                <div class="form-group col-4">
                    <label>Departement </label>
                    @if (mode == "View" || mode == "Delete")
                    {
                        @Html.TextBoxFor(m => m.Departement_Code, new { @class = "form-control", @readonly = "readonly" })
                    }
                    else
                    {
                        @Html.DropDownListFor(m => m.Departement_Code, Model.GetDepartementListItem(), "Select Departement", new { @class = "form-control select2", id = "departementDropdown" })
                    }
                    @Html.ValidationMessageFor(m => m.Departement_Code, "", new { @class = "text-danger" })
                </div>
                <div class="form-group col-4">
                    <label>City</label>
                    @if (mode == "View" || mode == "Delete")
                    {
                        @Html.TextBoxFor(m => m.City_Name, new { @class = "form-control", @readonly = "readonly" })
                    }
                    else
                    {
                        @Html.DropDownListFor(m => m.City_Name, Model.GetCityListItem(), "Select City", new { @class = "form-control select2", id = "cityDropdown" })
                    }
                    @Html.ValidationMessageFor(m => m.City_Name, "", new { @class = "text-danger" })
                </div>

                <div class="form-group col-4">
                    <label>Location</label>
                    @if (mode == "View" || mode == "Delete")
                    {
                        @Html.TextBoxFor(m => m.Location_Name, new { @class = "form-control", @readonly = "readonly" })
                    }
                    else
                    {
                        @Html.DropDownListFor(m => m.Locations, Model.GetLocationListItem(), "Select Location", new { @class = "form-control select2", id = "locationDropdown" })
                    }
                    @Html.ValidationMessageFor(m => m.Locations, "", new { @class = "text-danger" })
                </div>
                <div class="form-group col-3">
                    <label>Last Check Date</label>
                    @if (mode == "View" || mode == "Delete")
                    {
                        @Html.TextBoxFor(m => m.Last_Check_Date, new { @class = "form-control", placeholder = "Last Check Date", type = "date", @readonly = readOnly })
                    }
                    else
                    {
                        @Html.TextBoxFor(m => m.Last_Check_Date, new { @class = "form-control", placeholder = "Last Check Date", type = "date" })
                    }
                    @Html.ValidationMessageFor(m => m.Last_Check_Date, "", new { @class = "text-danger" })
                </div>
                <div class="form-group col-4">
                    <label>Condition</label>
                    @if (mode == "View" || mode == "Delete")
                    {
                        @Html.TextBoxFor(m => m.Condition, new { @class = "form-control", placeholder = "", @readonly = readOnly })
                    }
                    else
                    {
                        @Html.TextBoxFor(m => m.Condition, new { @class = "form-control", placeholder = "Input Condition" })
                    }
                    @Html.ValidationMessageFor(m => m.Condition, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
        </div>
        <!-- /.col -->
        <!-- /.row -->
        <!-- /.card-body -->
        </div>

        <div class="card card-primary @(readOnly ?" collapse-card": "")">
            <div class="card-header">
                <h3 class="card-title">Status Information</h3>
                <div class="card-tools">
                    <button type="button" class="btn btn-tool" data-card-widget="collapse">
                        <i class="fas fa-plus"></i>
                    </button>
                </div>
            </div>
            <div class="card-body">
                <div class="form-group">
                    <label>Status</label>
                    @if (mode == "View" || mode == "Delete")
                    {
                        @Html.TextBoxFor(m => m.Status, new { @class = "form-control", @readonly = "readonly" })
                    }
                    else if (mode == "Create" || mode == "Edit")
                    {
                        @Html.DropDownListFor(m => m.Status, new SelectList(new[]
                                 {
                        new {Value = "Return", Text = "Return"},
                        new {Value = "Borrowing", Text = "Borrowing"},
                        new {Value = "Service", Text = "Service"},
                        new {Value = "Ready", Text = "Ready"},
                        new {Value = "Assign", Text = "Assign"},
                        new {Value = "Write Off", Text = "Write Off"},
                    }, "Value", "Text"), Model.Status, new { @class = "form-control select2", id = "statusDropdown" })
                    }
                    @Html.ValidationMessageFor(m => m.Status, "", new { @class = "text-danger" })
                </div>

                @Html.HiddenFor(m => m.PIC, new { id = "hiddenPIC" })
                @Html.ValidationMessageFor(m => m.PIC, "", new { @class = "text-danger" })
                @Html.HiddenFor(m => m.Role, new { id = "hiddenRole" })
                @Html.ValidationMessageFor(m => m.Role, "", new { @class = "text-danger" })
                @Html.HiddenFor(m => m.Company_User, new { id = "hiddenComp" })
                @Html.ValidationMessageFor(m => m.Company_User, "", new { @class = "text-danger" })
                @Html.HiddenFor(m => m.Transaction_Date, new { id = "hiddenTransactionDate" })
                @Html.ValidationMessageFor(m => m.Transaction_Date, "", new { @class = "text-danger" })
                @if (!readOnly)
                {
                    <div id="returnForm" class="status-form" style="display: none">
                        <div class="form-group">
                            <label>PIC / Vendor</label>
                            <input type="text" class="form-control" placeholder="PIC / Vendor" id="returnPIC" />
                        </div>
                        <div class="form-group" id="returnRoleFormGroup" style="display: none;">
                            <label>Role</label>
                            @if (mode == "View" || mode == "Delete")
                            {
                                @Html.TextBoxFor(m => m.Role, new { @class = "form-control", @readonly = "readonly", id = "roleDropdown" })
                            }
                            else
                            {
                                @Html.DropDownListFor(m => m.Role, Model.GetRoleListItem(), "Select Role", new { @class = "form-control select2", id = "returnRole" })
                            }
                            @Html.ValidationMessageFor(m => m.Role, "", new { @class = "text-danger" })
                        </div>
                        <div class="form-group">
                            <label>Company User</label>
                            <input type="text" class="form-control" placeholder="Company User" id="returnComp" />
                        </div>
                        <div class="form-group">
                            <label>Return Date</label>
                            <input type="date" class="form-control" id="returnDate" />
                        </div>
                    </div>
                    <div id="borrowForm" class="status-form" style="display: none">
                        <div class="form-group">
                            <label>PIC / Vendor</label>
                            <input type="text" class="form-control" placeholder="PIC / Vendor" id="borrowPIC" />
                        </div>
                        <div class="form-group" id="borrowRoleFormGroup" style="display: none;">
                            <label>Role</label>
                            @if (mode == "View" || mode == "Delete")
                            {
                                @Html.TextBoxFor(m => m.Role, new { @class = "form-control", @readonly = "readonly", id = "roleDropdown" })
                            }
                            else
                            {
                                @Html.DropDownListFor(m => m.Role, Model.GetRoleListItem(), "Select Role", new { @class = "form-control select2", id = "borrowRole" })
                            }
                            @Html.ValidationMessageFor(m => m.Role, "", new { @class = "text-danger" })
                        </div>
                        <div class="form-group">
                            <label>Company User</label>
                            <input type="text" class="form-control" placeholder="Company User" id="borrowComp" />
                        </div>
                        <div class="form-group">
                            <label>Borrow Date</label>
                            <input type="date" class="form-control" id="borrowDate" />
                        </div>
                    </div>
                    <div id="serviceForm" class="status-form" style="display: none">
                        <div class="form-group">
                            <label>PIC / Vendor</label>
                            <input type="text" class="form-control" placeholder="PIC / Vendor" id="servicePIC" />
                        </div>
                        <div class="form-group" id="serviceRoleFormGroup" style="display: none;">
                            <label>Role</label>
                            @if (mode == "View" || mode == "Delete")
                            {
                                @Html.TextBoxFor(m => m.Role, new { @class = "form-control", @readonly = "readonly", id = "roleDropdown" })
                            }
                            else
                            {
                                @Html.DropDownListFor(m => m.Role, Model.GetRoleListItem(), "Select Role", new { @class = "form-control select2", id = "serviceRole" })
                            }
                            @Html.ValidationMessageFor(m => m.Role, "", new { @class = "text-danger" })
                        </div>
                        <div class="form-group">
                            <label>Company User</label>
                            <input type="text" class="form-control" placeholder="Company User" id="serviceComp" />
                        </div>
                        <div class="form-group">
                            <label>Service Date</label>
                            <input type="date" class="form-control" id="serviceDate" />
                        </div>
                    </div>
                    <div id="readyForm" class="status-form" style="display: none">
                        <div class="form-group">
                            <label>PIC / Vendor</label>
                            <input type="text" class="form-control" placeholder="PIC / Vendor" id="readyPIC" />
                        </div>
                        <div class="form-group" id="readyRoleFormGroup" style="display: none;">
                            <label>Role</label>
                            @if (mode == "View" || mode == "Delete")
                            {
                                @Html.TextBoxFor(m => m.Role, new { @class = "form-control", @readonly = "readonly", id = "roleDropdown" })
                            }
                            else
                            {
                                @Html.DropDownListFor(m => m.Role, Model.GetRoleListItem(), "Select Role", new { @class = "form-control select2", id = "readyRole" })
                            }
                            @Html.ValidationMessageFor(m => m.Role, "", new { @class = "text-danger" })
                        </div>
                        <div class="form-group">
                            <label>Company User</label>
                            <input type="text" class="form-control" placeholder="Company User" id="readyComp" />
                        </div>
                        <div class="form-group">
                            <label>Available Date</label>
                            <input type="date" class="form-control" id="readyDate" />
                        </div>
                    </div>
                    <div id="assignForm" class="status-form" style="display: none">
                        <div class="form-group">
                            <label>PIC</label>
                            <input type="text" class="form-control" placeholder="PIC / Vendor" id="assignPIC" />
                        </div>
                        <div class="form-group" id="assignRoleFormGroup" style="display: none;">
                            <label>Role</label>
                            @if (mode == "View" || mode == "Delete")
                            {
                                @Html.TextBoxFor(m => m.Role, new { @class = "form-control", @readonly = "readonly", id = "roleDropdown" })
                            }
                            else
                            {
                                @Html.DropDownListFor(m => m.Role, Model.GetRoleListItem(), "Select Role", new { @class = "form-control select2", id = "assignRole" })
                            }
                            @Html.ValidationMessageFor(m => m.Role, "", new { @class = "text-danger" })
                        </div>
                        <div class="form-group">
                            <label>Company User</label>
                            <input type="text" class="form-control" placeholder="Company User" id="assignComp" />
                        </div>
                        <div class="form-group">
                            <label>Assign Date</label>
                            <input type="date" class="form-control" id="assignDate" />
                        </div>
                    </div>
                    <div id="writeOffForm" class="status-form" style="display: none">
                        <div class="form-group">
                            <label>Approved By</label>
                            <input type="text" class="form-control" placeholder="PIC / Vendor" id="writeOffPIC" />
                        </div>
                        <div class="form-group" id="writeOffRoleFormGroup" style="display: none;">
                            <label>Role</label>
                            @if (mode == "View" || mode == "Delete")
                            {
                                @Html.TextBoxFor(m => m.Role, new { @class = "form-control", @readonly = "readonly", id = "roleDropdown" })
                            }
                            else
                            {
                                @Html.DropDownListFor(m => m.Role, Model.GetRoleListItem(), "Select Role", new { @class = "form-control select2", id = "writeOffRole" })
                            }
                            @Html.ValidationMessageFor(m => m.Role, "", new { @class = "text-danger" })
                        </div>
                        <div class="form-group">
                            <label>Company User</label>
                            <input type="text" class="form-control" placeholder="Company User" id="writeOffComp" />
                        </div>
                        <div class="form-group">
                            <label>Write Off Date</label>
                            <input type="date" class="form-control" id="writeOffDate" />
                        </div>
                    </div>
                }
                <div class="form-group action-buttons">
                    <button type="button" class="btn btn-secondary" id="btnCancel">Cancel</button>
                    @if (mode == "Create" || mode == "Edit")
                    {
                        <button type="button" class="btn btn-primary float-right" id="btnSave">Save</button>
                    }
                    else if (mode == "Delete")
                    {
                        <button type="button" class="btn btn-primary float-right" id="btnDelete">Delete Asset</button>
                    }
                </div>
            </div>
        </div>
    }
    <div class="clearfix"></div>

    @if (showHistory)
    {
        <div class="card">
            <div class="card-header">
                <h3 class="card-title">
                    Asset History
                </h3>
                <div class="card-tools">
                    <div class="input-group input-group-sm" style="width: 150px;">
                        <input type="text" name="table_search" class="form-control float-right" placeholder="Search">
                        <div class="input-group-append">
                            <button type="submit" class="btn btn-default" id="btnSearch"><i class="fas fa-search"></i></button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="card-body table-responsive p-0">
            <table class="table table-hover text-nowrap">
                <thead>
                    <tr>
                        <th>No Assets</th>
                        <th>PIC / Vendor</th>
                        <th>Role</th>
                        <th>Company User</th>
                        <th>Transaction Date</th>
                        <th>Status</th>
                        <th>Submit Date</th>

                    </tr>
                </thead>
                <tbody id="assetHistoryTable">
                    @if (Model.AssetHistory != null && Model.AssetHistory.Any())
                    {
                        foreach (var item in Model.AssetHistory)
                        {
                            <tr>
                                <td>@item.No_asset</td>
                                <td>@item.PIC</td>
                                <td>@item.Role</td>
                                <td>@item.Company_User</td>
                                <td>@(item.Transaction_Date.HasValue ? item.Transaction_Date.Value.ToString("yyyy-MM-dd") : "")</td>
                                <td>@item.Status</td>
                                <td>@(item.Create_Date.HasValue ? item.Create_Date.Value.ToString("yyyy-MM-dd") : "")</td>
                            </tr>
                        }
                    }
                    else
                    {
                        <tr>
                            <td colspan="5" class="text-center">No Asset found</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
</section>

<script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js"></script>
<script>
    function previewMultiple() {
        var inputFile = document.getElementById("file");
        var imageLinksContainer = document.getElementById("imageLinks");
        var preview = document.getElementById("assetImagePreview");
        var noImageText = document.getElementById("noImageText");
        var hiddenField = document.getElementById("Asset_Image");
        var currentPreview = document.getElementById("currentPreview");
        var assetImagePreview = document.getElementById("assetImagePreview");

        var existImages = hiddenField.value ? hiddenField.value.split(';').filter(path => path.trim() !== "") : [];

        imageLinksContainer.innerHTML = "";
        var totalImages = 0;
        if (existImages.length > 0) {
            for (var i = 0; i < existImages.length; i++) {
                var imagePath = existImages[i];
                if (imagePath.trim() !== "") {
                    totalImages++;

                    var wrapper = document.createElement("div");
                    wrapper.className = "image-link-wrapper";
                    var link = document.createElement("a");
                    link.href = "javascript:void(0);";
                    link.textContent = "Image " + totalImages + ": " + (imagePath.split('/').pop() || imagePath);
                    link.className = "image-link";
                    link.setAttribute("data-index", i);
                    link.style.display = "block";
                    link.style.marginBottom = "5px";
                    link.style.color = "#007bff";
                    link.style.textDecoration = "underline";

                    (function (path) {
                        link.onclick = function (e) {
                            e.preventDefault();
                            assetImagePreview.src = '/UploadFile/' + path
                            assetImagePreview.style.display = "block";

                            resetLinkStyles();

                            this.style.fontWeight = "bold";
                            this.style.color = "#007bff";
                        };
                    })(imagePath);
                    var deleteBtn = document.createElement("button");
                    deleteBtn.type = "button";
                    deleteBtn.className = "delete-image-btn";
                    deleteBtn.innerHTML = "×";

                    (function (path) {
                        deleteBtn.onclick = function (e) {
                            e.preventDefault();
                            e.stopPropagation();
                            deleteImage(path);
                        };
                    })(imagePath);

                    wrapper.appendChild(link);
                    wrapper.appendChild(deleteBtn);
                    imageLinksContainer.appendChild(wrapper);
                }
            }
        }
        if (inputFile && inputFile.files && inputFile.files.length > 0) {
            for (var i = 0; i < inputFile.files.length; i++) {
                var file = inputFile.files[i];
                totalImages++;

                var wrapper = document.createElement("div");
                wrapper.className = "image-link-wrapper";
                var link = document.createElement("a");
                link.href = "javascript:void(0);";
                link.textContent = "Image " + totalImages + ": " + file.name;
                link.className = "image-link new-image";
                link.setAttribute("data-index", i);
                link.style.display = "block";
                link.style.marginBottom = "5px";
                link.style.color = "#007bff";
                link.style.textDecoration = "underline";

                (function (index) {
                    link.onclick = function (e) {
                        e.preventDefault();
                        var file = inputFile.files[index];
                        var imageUrl = URL.createObjectURL(file);

                        assetImagePreview.src = imageUrl;
                        currentPreview.style.display = "block";

                        resetLinkStyles();

                        this.style.fontWeight = "bold";
                        this.style.color = "#007bff";
                    };
                })(i);


                var deleteBtn = document.createElement("button");
                deleteBtn.type = "button";
                deleteBtn.className = "delete-image-btn";
                deleteBtn.innerHTML = "×";

                (function (index) {
                    deleteBtn.onclick = function (e) {
                        e.preventDefault();
                        e.stopPropagation();
                        deleteNewImage(index);
                    };
                })(i);

                wrapper.appendChild(link);
                wrapper.appendChild(deleteBtn);
                imageLinksContainer.appendChild(wrapper);
            }
        }
        if (totalImages > 0) {
            var firstLink = document.querySelector(".image-link");
            if (firstLink) {
                firstLink.click();
            }
            noImageText.style.display = "none";
        } else {
            noImageText.style.display = "block";
            currentPreview.style.display = "none";
            assetImagePreview.src = "";

        }
    }

    function resetLinkStyles() {
        var links = document.getElementsByClassName("image-link");
        for (var j = 0; j < links.length; j++) {
            links[j].style.fontWeight = "normal";
            links[j].style.color = "#007bff";
        }
    }

    function displayExistImage() {
        var hiddenField = document.getElementById("Asset_Image");
        var imageLinksContainer = document.getElementById("imageLinks");
        var noImageText = document.getElementById("noImageText");
        var assetImagePreview = document.getElementById("assetImagePreview");

        if (imageLinksContainer) {
            imageLinksContainer.innerHTML = "";
        }

        if (hiddenField && hiddenField.value) {
            var imagePaths = hiddenField.value.split(";").filter(img => img.trim() !== "");

            if (imagePaths.length > 0) {
                noImageText.style.display = "none";
                currentPreview.style.display = "block";

                for (var i = 0; i < imagePaths.length; i++) {
                    var imagePath = imagePaths[i];

                    if (imagePath.trim() !== "") {
                        var wrapper = document.createElement("div");
                        wrapper.className = "image-link-wrapper";
                        var link = document.createElement("a");
                        link.href = "#";
                        link.textContent = "Image " + (i + 1) + ": " + (imagePath.split('/').pop() || imagePath);
                        link.className = "image-link";
                        link.setAttribute("data-path", imagePath);
                        link.style.display = "block";
                        link.style.marginBottom = "8px";
                        link.style.color = "#007bff";
                        link.style.textDecoration = "underline";

                        (function (path) {
                        link.onclick = function (e) {
                            e.preventDefault();
                            var path = this.getAttribute("data-path");
                            assetImagePreview.src = '/UploadFile/' + path;
                            assetImagePreview.style.display = "block";
                            currentPreview.style.display = "block";

                            resetLinkStyles();

                            this.style.fontWeight = "bold";
                            this.style.color = "#007bff";
                        };
                        })(imagePath);

                        var deleteBtn = document.createElement("Button");
                        deleteBtn.type = "button";
                        deleteBtn.className = "delete-image-btn";
                        deleteBtn.innerHTML = "×";

                        (function (path) {
                            deleteBtn.onclick = function (e) {
                                e.preventDefault();
                                e.stopPropagation();
                                deleteImage(path);
                            };
                        })(imagePath);
                        wrapper.appendChild(link);
                        wrapper.appendChild(deleteBtn);
                        imageLinksContainer.appendChild(wrapper);
                    }
                }
                if (imagePaths.length > 0 && imagePaths[0].trim() !== "") {
                    assetImagePreview.src = imagePaths[0].trim();
                    currentPreview.style.display = "block";
                    var firstLink = document.querySelector(".image-link");
                    if (firstLink) {
                        firstLink.style.fontWeight = "bold";
                        firstLink.style.color = "#0056b3";
                    }
                }
            } else {
                noImageText.style.display = "block";
                assetImagePreview.style.display = "none";
            }
        } else {
            noImageText.style.display = "block";
            assetImagePreview.style.display = "none";
        }
    }


    function deleteImage(imagePath) {
        if (confirm("Are you sure you want to delete this image?")) {
            var hiddenField = document.getElementById("Asset_Image");
            var currentImages = hiddenField.value.split(';').filter(path => path.trim() !== "");

            var updatedImages = currentImages.filter(path => path !== imagePath);

            hiddenField.value = updatedImages.join(';');

            previewMultiple();

            toastr.success("Image deleted successfully");
        }
    }

    function deleteNewImage(index) {
        if (confirm("Are you sure you want to delete this image?")) {
            var inputFile = document.getElementById("file");

            const dt = new DataTransfer();

            for (let i = 0; i < inputFile.files.length; i++) {
                if (i !== index) {
                    dt.items.add(inputFile.files[i]);
                }
            }

            inputFile.files = dt.files;

            previewMultiple();

            toastr.success("Image deleted successfully");
        }
    }


    $(function () {
        var mode = "@mode";
        var readOnly = mode === "View" || mode === "Delete";
        var originalStatus = "@Model.Status";

        if (mode == "Edit" || mode == "View" || mode == "Delete") {
            displayExistImage();

            var statusValue = "@Model.Status";
            var cityValue = "@Model.City_Name";
            var locationValue = "@Model.Locations";
            var materialGroupValue = "@Model.Material_Group";
            var materialCodeValue = "@Model.Material_Code";
            var departmentCodeValue = "@Model.Departement_Code";
            var companyCodeValue = "@Model.Company_Code";
            var uomValue = "@Model.UoM";
            var originalPIC = "@Model.PIC";
            var originalTransactionDate = "@(Model.Transaction_Date.HasValue ? Model.Transaction_Date.Value.ToString("yyyy-MM-dd") : "")";
            var roleValue = "@Model.Role";
            var compValue = "@Model.Company_User";


            $("#hiddenPIC").val(originalPIC);
            $("#hiddenRole").val(roleValue);
            $("#hiddenComp").val(compValue);
            $("#hiddenTransactionDate").val(originalTransactionDate);

            if (statusValue) {
                $("#statusDropdown").val(statusValue).trigger('change');
            }

            if (mode == "Edit" && cityValue) {
                $("#cityDropdown").val(cityValue).trigger('change');

                $.ajax({
                    url: '@Url.Action("GetLocationByCity", "AssetManagement")',
                    type: "GET",
                    data: { cityId: cityValue },
                    success: function (locations) {
                        $("#locationDropdown")
                            .empty()
                            .append('<option value="">Select Option </option>');

                        if (locations && locations.length > 0) {
                            locations.forEach(function (location) {
                                var selected = (location.locationCode == locationValue) ? "selected" : "";
                                $("#locationDropdown").append(
                                    `<option value="${location.locationCode}" ${selected}>
                                ${location.locationName}
                                </option>`
                                );
                            });
                        }
                        $("#locationDropdown").select2({
                            placeholder: "Select Location",
                            allowClear: true,
                            width: '100%',
                            dropdownParent: $('body')
                        });

                        if (locationValue) {
                            $("#locationDropdown").val(locationValue).trigger('change');
                        }
                    },
                    error: function (error) {
                        console.error("Error loading locations:", error);
                        showErrorToast("Error loading locations.");
                    }
                });

            }

            if ((mode == "Edit" || mode == "View" || mode == "Delete") && materialGroupValue) {
                $("#materialGroupDropdown").val(materialGroupValue).trigger('change');
            }

            $("#hiddenPIC").val(originalPIC);
            $("#hiddenTransactionDate").val(originalTransactionDate);

            if (statusValue) {
                $("#statusDropdown").val(statusValue).trigger('change');
            }
        }

        $('.select2').select2({
            placeholder: "Select an option",
            allowClear: true,
            width: '100%',
            dropdownParent: $('body')
        });


        function showErrorToast(message) {
            toastr.error(message, {
                positionClass: 'toast-top-right',
                closeButton: true,
                progressBar: true,
                preventDuplicates: true,
                newestOnTop: true
            });
        }

        function showSuccessToast(message) {
            toastr.success(message, {
                positionClass: 'toast-top-right',
                closeButton: true,
                progressBar: true,
                preventDuplicates: true,
                newestOnTop: true
            });
        }

        function fetchCompanyName(companyCode) {
            if (!companyCode) {
                $('#Company_Name').val("");
                return;
            }

            $.ajax({
                url: '@Url.Action("GetCompanyNameByCode", "AssetManagement")',
                type: 'GET',
                data: { companyCode: companyCode },
                success: function (data) {
                    $('#Company_Name').val(data);
                },
                error: function (error) {
                    console.error("Error Loading company name:", error);
                    $('#Company_Name').val("");
                    showErrorToast("Error loading company name.");
                }
            });
        }

        function loadMaterialCodesByGroup(materialGroup) {
            if (!materialGroup) {
                $("#materialCodeDropdown")
                    .empty()
                    .append('<option value="">Select Material Code</option>')
                    .trigger('change');
                return;
            }
            $.ajax({
                url: '@Url.Action("GetMaterialCodesByGroup", "AssetManagement")',
                type: 'GET',
                data: { materialGroup: materialGroup },
                success: function (materialCodes) {
                    $("#materialCodeDropdown")
                        .empty()
                        .append('<option value="">Select Material Code</option>');
                    if (materialCodes && materialCodes.length > 0) {
                        materialCodes.forEach(function (code) {
                            $("#materialCodeDropdown").append(
                                `<option value="${code.materialCode}">${code.materialCode}</option>`
                            );
                        });
                    } else {
                        console.log("No material codes found for group:", materialGroup);
                    }

                    $("#materialCodeDropdown").select2({
                        placeholder: "Select Material Code",
                        allowClear: true,
                        width: '100%',
                        dropdownParent: $('body')
                    });


                    if (mode == "Edit" || mode == "View" || mode == "Delete") {
                        var materialCodeValue = "@Model.Material_Code";
                        if (materialCodeValue) {
                            setTimeout(function () {
                                $("#materialCodeDropdown").val(materialCodeValue).trigger('change');
                            }, 300);
                        }
                    }
                },
                error: function (error) {
                    console.error("Error loading material codes:", error);
                    showErrorToast("Error loading material codes.");
                }
            });
        }

        $("#materialGroupDropdown").on('change', function () {
            var selectedMaterialGroup = $(this).val();
            loadMaterialCodesByGroup(selectedMaterialGroup);
        });


        $("#cityDropdown").on('change', function () {
            var selectedCityName = $(this).val();
            $("#locationDropdown").empty().trigger('change');

            if (!selectedCityName || selectedCityName === "Select City") {
                return;
            }

            $.ajax({
                url: '@Url.Action("GetLocationByCity", "AssetManagement")',
                type: 'GET',
                data: { cityId: selectedCityName },
                success: function (locations) {
                    $("#locationDropdown")
                        .empty()
                        .append('<option value="">Select Option</option>');

                    if (locations && locations.length > 0) {
                        locations.forEach(function (location) {
                            $("#locationDropdown").append(
                                `<option value="${location.locationCode}">
                            ${location.locationName}
                        </option>`
                            );
                        });
                    } else {
                        console.log("No locations found for city:", selectedCityName);
                    }

                    $("#locationDropdown").select2({
                        placeholder: "Select Location",
                        allowClear: true,
                        width: '100%',
                        dropdownParent: $('body')
                    });
                    if (mode == "Edit" || mode == "View" || mode == "Delete") {
                    var locationValue = "@Model.Locations";
                    if (locationValue) {

                    setTimeout(function () {
                        $("#locationDropdown").val(locationValue).trigger('change');
                    }, 300);
                }
            }
        },
                error: function (error) {
                    console.error("Error loading locations:", error);
                    showErrorToast("Error loading locations.");
                }
            });
        });

        $("#companyCodeDropdown").on('change', function () {
            fetchCompanyName($(this).val());
        });

        var initialCompanyCode = $("#companyCodeDropdown").val();
        if (initialCompanyCode) {
            fetchCompanyName(initialCompanyCode);
        }

        function storeOriginalValues() {
            if (mode === "Edit") {
                var originalStatus = "@Model.Status";
                var originalPIC = "@Model.PIC";
                var originalDate = "@(Model.Transaction_Date.HasValue ? Model.Transaction_Date.Value.ToString("yyyy-MM-dd") : "")";
                var originalRole = "@Model.Role";
                var originalComp = "@Model.Company_User";

                $("#statusDropdown").data("original-status", originalStatus);
                $("#hiddenPIC").data("original-pic", originalPIC);
                $("#hiddenTransactionDate").data("original-date", originalDate);
                $("#hiddenRole").data("original-role", originalRole);
                $("#hiddenComp").data("original-comp", originalComp);

                console.log("Original values stored:", {
                    status: originalStatus,
                    pic: originalPIC,
                    date: originalDate,
                    role: originalRole,

                });
            }
        }

        function handleStatusFormDisplay() {
            if (readOnly) return;

            $(".status-form").hide();
            var status = $("#statusDropdown").val();
            if (!status) {
                $("#roleFormGroup").hide();
                $("#hiddenPIC").val("");
                $("#hiddenRole").val("");
                $("#hiddenTransactionDate").val("");
                $("#hiddenComp").val("");
                return;
            } else {

                $("#roleFormGroup").show();
            }

            var status = $("#statusDropdown").val();
            if (!status) {
            $("#hiddenPIC").val("");
                $("#hiddenTransactionDate").val("");
                return;
            }

            const statusFormMap = {
                'Return': '#returnForm',
                'Borrowing': '#borrowForm',
                'Service': '#serviceForm',
                'Ready': '#readyForm',
                'Assign': '#assignForm',
                'Write Off': '#writeOffForm'
            };

            const formSelector = statusFormMap[status];
            if (formSelector) {
                $(".status-form").hide();
                $(formSelector).show();

                const roleFormGroup = formSelector.replace('Form', 'RoleFormGroup');
                $(roleFormGroup).show();

                const picSelector = formSelector.replace('Form', 'PIC');
                const dateSelector = formSelector.replace('Form', "Date")
                const roleSelector = formSelector.replace('Form', "Role")
                const compSelector = formSelector.replace('Form', "Comp")
                if (mode === "Edit" && !$(picSelector).data('user-modified')) {
                    if ($("#hiddenPIC").val()) {
                        $(picSelector).val($('#hiddenPIC').val());
                        $(picSelector).data('populated-from-db', true);
                    }
                    if ($("#hiddenTransactionDate").val()) {
                        $(dateSelector).val($('#hiddenTransactionDate').val());
                        $(dateSelector).data('populated-from-db', true);
                    }
                    if ($("#hiddenRole").val()) {
                            $(roleSelector).val($('#hiddenRole').val()).trigger('change');
                            $(roleSelector).data('populated-from-db', true);
                    }
                    if ($("#hiddenComp").val()) {
                        $(compSelector).val($('#hiddenComp').val());
                        $(compSelector).data('populated-from-db', true);
                    }
                }
            }
        }
        if (mode == "Create") {
            $("#statusDropdown").prepend('<option value="" selected>Select Status</option>');

        }

        if (!$("#statusDropdown").val()) {
            $("#roleFormGroup").hide();
        }

        $(".status-form input[type='text'], .status-form input[type='date']").on('change', function () {
            $(this).data('user-modified', true);
        });



        $("#statusDropdown").on('change', handleStatusFormDisplay);
        if (!readOnly) {
            handleStatusFormDisplay();
        }

        function updateHiddenFields() {
            var status = $("#statusDropdown").val();
            if (!status) return;

            let picValue = "";
            let dateValue = "";
            let roleValue = "";
            let companyValue = "";

            switch (status) {
                case 'Return':
                    picValue = $("#returnPIC").val();
                    dateValue = $("#returnDate").val();
                    roleValue = $("#returnRole").val();
                    companyValue = $("#returnComp").val();
                    break;
                case 'Borrowing':
                    picValue = $("#borrowPIC").val();
                    dateValue = $("#borrowDate").val();
                    roleValue = $("#borrowRole").val();
                    companyValue = $("#borrowComp").val();
                    break;
                case 'Service':
                    picValue = $("#servicePIC").val();
                    dateValue = $("#serviceDate").val();
                    roleValue = $("#serviceRole").val();
                    companyValue = $("#serviceComp").val();
                    break;
                case 'Ready':
                    picValue = $("#readyPIC").val();
                    dateValue = $("#readyDate").val();
                    roleValue = $("#readyRole").val();
                    companyValue = $("#readyComp").val();
                    break;
                case 'Assign':
                    picValue = $("#assignPIC").val();
                    dateValue = $("#assignDate").val();
                    roleValue = $("#assignRole").val();
                    companyValue = $("#assignComp").val();
                    break;
                case 'Write Off':
                    picValue = $("#writeOffPIC").val();
                    dateValue = $("#writeOffDate").val();
                    roleValue = $("#writeOffRole").val();
                    companyValue = $("#writeOffComp").val();
                    break;
            }


            $("#hiddenPIC").val(picValue);
            $("#hiddenTransactionDate").val(dateValue);
            $("#hiddenRole").val(roleValue);
            $("#hiddenComp").val(companyValue);
        }
        function formatDate(dateString) {
            if (!dateString) return "";

            try {
                if (typeof dateString === 'string') {
                    if (dateString.indexOf('/Date(') === 0) {
                        const timestamp = parseInt(dateString.substr(6));
                        const date = new Date(timestamp);
                        if (isNaN(date.getTime())) return "";

                        const year = date.getFullYear();
                        const month = (date.getMonth() + 1).toString().padStart(2, '0');
                        const day = date.getDate().toString().padStart(2, '0');
                        return `${year}-${month}-${day}`;
                    }
                    else if (dateString.includes('T')) {
                        const date = new Date(dateString);
                        if (isNaN(date.getTime())) return "";

                        const year = date.getFullYear();
                        const month = (date.getMonth() + 1).toString().padStart(2, '0');
                        const day = date.getDate().toString().padStart(2, '0');
                        return `${year}-${month}-${day}`;
                    }
                    else if (dateString.match(/^\d{4}-\d{2}-\d{2}$/)) {
                        return dateString;
                    }
                }

                const date = new Date(dateString);
                if (isNaN(date.getTime())) return "";

                const year = date.getFullYear();
                const month = (date.getMonth() + 1).toString().padStart(2, '0');
                const day = date.getDate().toString().padStart(2, '0');
                return `${year}-${month}-${day}`;

            } catch (e) {
                console.error("Error parsing date:", e);
                return "";
            }
        }


        function searchAssetHistory() {
            var search = $("input[name='table_search']").val().trim();
            var noAsset = $("#No_asset").val();

            if (!noAsset) {
                $("#assetHistoryTable").html('<tr><td colspan="7" class="text-center">No asset selected</td></tr>');
                return;
            }

            $("#assetHistoryTable").html('<tr><td colspan="7" class="text-center"><i class="fas fa-spinner fa-spin"></i> Searching...</td></tr>');

            console.log("Searching for asset history: Asset=" + noAsset + ", Search=" + search);

            $.ajax({
                url: '/AssetManagement/SearchAssetHistory',
                type: 'GET',
                data: { search: search, noAsset: noAsset },
                dataType: 'json',
                cache: false,
                success: function (response) {
                    if (!response) {
                        var message = response.message || "An error occurred while searching";
                        $("#assetHistoryTable").html('<tr><td colspan="7" class="text-center">' + message + '</td></tr>');
                        return;
                    }

                    if (response.success === false) {
                        var message = response.message || "Error processing history data";
                        $("#assetHistoryTable").html('<tr><td colspan="7" class="text-center">' + message + '</td></tr>');
                        return;
                    }

                    var data = response.data;
                    if (!data || !Array.isArray(data) || data.length === 0) {
                        var message = search ?
                            "No results found matching '" + search + "'" :
                            "No history records found for this asset";
                        $("#assetHistoryTable").html('<tr><td colspan="7" class="text-center">' + message + '</td></tr>');
                        return;
                    }

                    renderAssetHistory(data);
                },
                error: function (xhr, status, error) {
                    console.error("Error searching asset history:", error);
                    console.error("Response:", xhr.responseText);
                    $("#assetHistoryTable").html('<tr><td colspan="7" class="text-center text-danger">Error searching asset history</td></tr>');
                }
            });
        }

        function renderAssetHistory(data) {
            var tbody = $("#assetHistoryTable");
            tbody.empty();

            if (data && data.length > 0) {
                    data.forEach(function (item) {
                        var statusClass = "";
                        if (item.Status) {
                            var status = item.Status.toLowerCase().replace(/\s+/g, "-");
                            if (status === "borrowing") statusClass = "status-borrowing";
                            else if (status === "return") statusClass = "status-return";
                            else if (status === "service") statusClass = "status-service";
                            else if (status === "ready") statusClass = "status-ready";
                            else if (status === "assign") statusClass = "status-assign";
                            else if (status === "write-off") statusClass = "status-write-off";
                    }

                        var row = $("<tr>").append(
                            $("<td>").text(item.No_asset || ""),
                            $("<td>").text(item.PIC || ""),
                            $("<td>").text(item.Role || ""),
                            $("<td>").text(item.Company_User || ""),
                            $("<td>").text(item.Transaction_Date || ""),
                            $("<td>").addClass(statusClass).text(item.Status || ""),
                            $("<td>").text(item.Submit_Date || "")
                    );
                    tbody.append(row);
                });
            } else {
                tbody.append(
                    $("<tr>").append( 
                        $("<td>").attr("colspan", "7").text("No data found")
                    )
                );
            }
        }

        $(document).ready(function () {

            if ($("#No_asset").val() && $("#No_asset").prop('readonly')) {
                setTimeout(function () {
                    searchAssetHistory();
                }, 300);
            }

            $("#btnSearch").unbind('click').on('click', function (e) {
                e.preventDefault();
                console.log("Search button clicked");
                searchAssetHistory();
            });

            $("input[name='table_search']").unbind('keypress').on('keypress', function (e) {
                if (e.which === 13) {  
                    e.preventDefault();
                    console.log("Enter key pressed in search input");
                    searchAssetHistory();
                }
            });

            $("#No_asset").on('change', function() {
            searchAssetHistory();
            });
        });


        $("#btnSave").click(function (e) {
            e.preventDefault();

            updateHiddenFields();

            $(".is-invalid").removeClass("is-invalid");
            $(".validation-error").remove();

            let isValid = true;

            if (!$("#No_asset").val()) {
                $("#No_asset").addClass("is-invalid");
                showErrorToast("No Asset is required.");
                isValid = false;
            }

            if (!$("#companyCodeDropdown").val()) {
                $("#companyCodeDropdown").next(".select2-container").addClass("is-invalid");
                showErrorToast("Company Code is required");
                isValid = false;
            }

            if (!$("#materialGroupDropdown").val()) {
                $("#materialGroupDropdown").next(".select2-container").addClass("is-invalid");
                showErrorToast("Material Group is required");
                isValid = false;
            }

            if (!$("#materialCodeDropdown").val()) {
                $("#materialCodeDropdown").next(".select2-container").addClass("is-invalid");
                showErrorToast("Material Code is required");
                isValid = false;
            }

            if (!$("#departementDropdown").val()) {
                $("#departementDropdown").next(".select2-container").addClass("is-invalid");
                showErrorToast("Departement is required");
                isValid = false;
            }
            if (!$("#cityDropdown").val()) {
                $("#cityDropdown").next(".select2-container").addClass("is-invalid");
                showErrorToast("City is required");
                isValid = false;
            }
            if (!$("#locationDropdown").val()) {
                $("#locationDropdown").next(".select2-container").addClass("is-invalid");
                showErrorToast("Location is required");
                isValid = false;
            }
            if (!$("#materialDescriptionDropdown").val()) {
                $("#materialDescriptionDropdown").addClass("is-invalid");
                showErrorToast("Asset Description is required");
                isValid = false;
            }
            const status = $("#statusDropdown").val();
            if (!status) {
                $("#statusDropdown").next(".select2-container").addClass("is-invalid");
                $("#statusDropdown").after('<span class="text-danger validation-error">Status is required.</span>');
                isValid = false;
            } else {

                let picValue = "";
                let dateValue = "";
                let roleValue = "";
                let compValue = "";
                let picFieldId = "";
                let dateFieldId = "";
                let roleFieldId = "";


                switch (status) {
                    case 'Return':
                        picValue = $("#returnPIC").val();
                        roleValue = $("#returnRole").val();
                        compValue = $("#returnComp").val();
                        dateValue = $("#returnDate").val();
                        picFieldId = "returnPIC";
                        roleFieldId = "returnRole";
                        dateFieldId = "returnDate";
                        break;
                    case 'Borrowing':
                        picValue = $("#borrowPIC").val();
                        dateValue = $("#borrowDate").val();
                        roleValue = $("#borrowRole").val();
                        compValue = $("#borrowComp").val();
                        picFieldId = "borrowPIC";
                        roleFieldId = "borrowRole";
                        dateFieldId = "borrowDate";
                        break;
                    case 'Service':
                        picValue = $("#servicePIC").val();
                        dateValue = $("#serviceDate").val();
                        roleValue = $("#serviceRole").val();
                        compValue = $("#serviceComp").val();
                        picFieldId = "servicePIC";
                        roleFieldId = "serviceRole";
                        dateFieldId = "serviceDate";
                        break;
                    case 'Ready':
                        picValue = $("#readyPIC").val();
                        dateValue = $("#readyDate").val();
                        roleValue = $("#readyRole").val();
                        compValue = $("#readyComp").val();
                        picFieldId = "readyPIC";
                        roleFieldId = "readyRole";
                        dateFieldId = "readyDate";
                        break;
                    case 'Assign':
                        picValue = $("#assignPIC").val();
                        dateValue = $("#assignDate").val();
                        roleValue = $("#assignRole").val();
                        compValue = $("#assignComp").val();
                        picFieldId = "assignPIC";
                        roleFieldId = "assignRole";
                        dateFieldId = "assignDate";
                        break;
                    case 'Write Off':
                        picValue = $("#writeOffPIC").val();
                        dateValue = $("#writeOffDate").val();
                        roleValue = $("#writeOffRole").val();
                        compValue = $("#writeOffComp").val();
                        picFieldId = "writeOffPIC";
                        roleFieldId = "writeOffRole";
                        dateFieldId = "writeOffDate";
                        break;
                }

                if (!picValue) {
                    $(`#${picFieldId}`).addClass("is-invalid");
                    $(`#${picFieldId}`).after(`<span class="text-danger validation-error">PIC is required for ${status} status.</span>`);
                    isValid = false;
                }

                if (!dateValue) {
                    $(`#${dateFieldId}`).addClass("is-invalid");
                    $(`#${dateFieldId}`).after(`<span class="text-danger validation-error">Date is required for ${status} status.</span>`);
                    isValid = false;
                }

                if (!roleValue) {
                    $(`#${roleFieldId}`).next(".select2-container").addClass("is-invalid");
                    $(`#${roleFieldId}`).after(`<span class="text-danger validation-error">Role is required for ${status} status.</span>`);
                    isValid = false;
                }

                $("#hiddenPIC").val(picValue);
                $("#hiddenTransactionDate").val(dateValue);
                $("#hiddenRole").val(roleValue);
                $("#hiddenComp").val(compValue);
            }

            if (!isValid) {
                return;
            }

            var statusChange = false;
            if (mode == "Edit") {
                var originalStatus = $("#statusDropdown").data("original-status");
                var originalPIC = $("#hiddenPIC").data("original-pic");
                var originalRole = $("#hiddenRole").data("original-role");
                var originalComp = $("#hiddenComp").data("original-comp");
                var originalDate = $("#hiddenTransactionDate").data("original-date");

                var currentStatus = $("#statusDropdown").val();
                var currentPIC = $("#hiddenPIC").val();
                var currentRole = $("#hiddenRole").val();
                var currentComp = $("#hiddenComp").val();
                var currentTransactionDate = $("#hiddenTransactionDate").val();

                statusChange = (currentStatus !== originalStatus ||
                    currentPIC !== originalPIC ||
                    currentRole !== originalRole ||
                    currentComp !== originalComp ||
                    currentTransactionDate !== originalDate);
                $("#assetForm").append('<input type="hidden" name="statusChange" + value = "' + statusChange + '" />');
            }

            var formData = new FormData($("#assetForm")[0]);

            if ($("#statusChangeInput").length) {
                $("#statusChangeInput").val(statusChange);
            } else {
                $("#assetForm").append('<input type="hidden" id="statusChangeInput" name="statusChange" value="' + statusChange + '" />');
            }

            const saveBtn = $(this);
            const originalText = saveBtn.html();
            saveBtn.html('<i class="fas fa-spinner fa-spin"></i> Saving...');
            saveBtn.prop('disabled', true);

            $.ajax({
                url: $("#assetForm").attr("action"),
                type: 'POST',
                data: formData,
                processData: false,
                contentType: false,
                success: function (data) {
                    console.log("Server response:", data);
                    if (data && data.success) {
                        toastr.success(data.message || "Transaction successful");
                        window.location.href = '/AssetManagement/Index';
                        refreshAssetTable();
                        refreshDashboardData();
                            updateDashboardCounts();
                    } else {
                        showErrorToast(data && data.message ? data.message : "Error saving asset");
                        saveBtn.html(originalText);
                        saveBtn.prop('disabled', false);
                    }
                },
                error: function (xhr, status, error) {
                    console.error("Error saving asset:", xhr.responseText);
                    try {
                        const response = JSON.parse(xhr.responseText);
                        showErrorToast(response.message || "Error saving asset, please try again");
                    } catch (e) {
                        showErrorToast("Error saving asset, please try again");
                    }
                    saveBtn.html(originalText);
                    saveBtn.prop('disabled', false);
                }
            });
        });

        $(document).ready(function () {
            storeOriginalValues();
        });

        $("#btnDelete").click(function(e) {
            e.preventDefault();

            if (confirm("Are you sure you want to delete this asset?")) {

                const deleteBtn = $(this);
                const originalText = deleteBtn.html();
                deleteBtn.html('<i class="fas fa-spinner fa-spin"></i> Deleting...');
                deleteBtn.prop('disabled', true);

                $.ajax({
                    url: '@Url.Action("DeleteAsset", "AssetManagement")',
                    type: 'POST',
                    data: {
                        No_asset: $("#No_asset").val(),
                        __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()
                    },
                    success: function(response) {
                        if (response.success) {
                            showSuccessToast("Asset successfully deleted");

                            window.location.href = '@Url.Action("Index", "AssetManagement")';
                        } else {
                            showErrorToast(response.message || "Failed to delete asset");
                            deleteBtn.html(originalText);
                            deleteBtn.prop('disabled', false);
                        }
                    },
                    error: function(xhr, status, error) {
                        console.error("Error deleting asset:", error);
                        showErrorToast("An error occurred while deleting the asset");
                        deleteBtn.html(originalText);
                        deleteBtn.prop('disabled', false);
                    }
                });
            }
        });

       $(document).ready(function () {
           refreshDashboardData();
       });


       function updateDashboardCounts(dashboardCounts) {
           if (!dashboardCounts) return;

           if (dashboardCounts.TotalAssets !== undefined) {
               $('#total-assets').text(dashboardCounts.TotalAssets);
           }

           if (dashboardCounts.AvailableAssets !== undefined) {
               $('#available-assets').text(dashboardCounts.AvailableAssets);
           }

           if (dashboardCounts.AssetsInUse !== undefined) {
               $('#assets-in-use').text(dashboardCounts.AssetsInUse);
           }


           if (dashboardCounts.AssetsInMaintenance !== undefined) {
               $('#assets-in-maintenance').text(dashboardCounts.AssetsInMaintenance);
           }
       }


       function refreshDashboardData() {
           $.ajax({
               url: '/AssetManagement/GetDashboardCountsJson',
               type: 'GET',
               dataType: 'json',
               cache: false,
               success: function (dashboardCounts) {
                   console.log("Dashboard data refreshed successfully:", dashboardCounts);
                   updateDashboardCounts(dashboardCounts);
               },
               error: function (xhr, status, error) {
                   console.error('Error refreshing dashboard data:', error);

               }
           });
       }

    function resetFormFields() {

        $("#statusDropdown").val("").trigger("change");
        $(".status-form input").val("");
        $("#hiddenPIC").val("");
        $("#hiddenTransactionDate").val("");
        $("#hiddenRole").val("");
        $("#hiddenComp").val("");

        $("#No_asset").val("");
        $("#companyCodeDropdown").val("").trigger("change");
        $("#materialGroupDropdown").val("").trigger("change");
        $("#materialCodeDropdown").val("").trigger("change");
        $("#Material_Description").val("");
        $("#Quantity").val("");
        $("#UoM").val("").trigger("change");
        $("#Acquisition_Date").val("");
        $("#Acquisition_value").val("");
        $("#No_Asset_PGA").val("");
        $("#No_Asset_Accounting").val("");
        $("#No_PO").val("");
        $("#Serial_Number").val("");
        $("#Device_Id").val("");
        $("#Latest_User").val("");
        $("#Departement_Code").val("").trigger("change");
        $("#cityDropdown").val("").trigger("change");
        $("#Locations").val("").trigger("change");
        $("#Last_Check_Date").val("");
        $("#Condition").val("");
    }



    $("#btnCancel").click(function () {
        window.location.href = '@Url.Action("Index", "AssetManagement")';
    });

});
</script>